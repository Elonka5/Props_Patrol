{"version":3,"file":"static/js/873.123760ce.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/FormError/FormError.jsx","hooks/usePasswordToggle.js","webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","services/validation/validationLoginSchema.js","components/LoginForm/LoginForm.jsx","pages/Login/Login.module.css","pages/Login/Login.jsx","services/api/api.js","redux/authOperations.js"],"sourcesContent":["import PropTypes from 'prop-types';\n// import css from './Button.module.css';\n\nexport const Button = ({\n  onClick = null,\n  text,\n  type = 'button',\n  variant = 'primary',\n}) => {\n  return (\n    <button type={type} onClick={onClick} variant={variant}>\n      {text}\n    </button>\n  );\n};\nButton.propTypes = {\n  onClick: PropTypes.func,\n  text: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  variant: PropTypes.string,\n};\n","import { ErrorMessage } from 'formik';\nimport PropTypes from 'prop-types';\n\nexport const FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <p>{message}</p>}\n    ></ErrorMessage>\n  );\n};\n\nFormError.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n","import { useState } from 'react';\n\nexport function usePasswordToggle(fields = []) {\n  const initialState = fields.reduce((acc, field) => {\n    acc[field] = false;\n    return acc;\n  }, {});\n\n  const [showPasswords, setShowPasswords] = useState(initialState);\n\n  const togglePasswordVisibility = field => {\n    setShowPasswords(prevState => ({\n      ...prevState,\n      [field]: !prevState[field],\n    }));\n  };\n\n  return { showPasswords, togglePasswordVisibility };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"loginform\":\"LoginForm_loginform__+X4Le\"};","import * as yup from 'yup';\n\nexport const loginSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Please enter a valid email address')\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .max(30, 'the name must contain a maximum of 30 characters'),\n  password: yup\n    .string()\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .min(6, 'Password must contain at least 6 characters')\n    .max(12, 'Password must contain a maximum of 12 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d|.*[!@#$%^&*()_+\\-=.<>])[a-zA-Z\\d!@#$%^&*()_+\\-=.<>]{6,12}$/,\n      'Password must contain at least one uppercase letter, one lowercase letter and one number'\n    ),\n});\n","import React from 'react';\nimport css from './LoginForm.module.css';\n\nimport { useDispatch } from 'react-redux';\nimport { ErrorMessage, Formik } from 'formik';\nimport { toast } from 'react-toastify';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'components/Button/Button';\nimport { logInThunk } from 'redux/authOperations';\nimport { usePasswordToggle } from 'hooks/usePasswordToggle';\nimport { FormError } from 'components/FormError/FormError';\nimport { loginSchema } from 'services/validation/validationLoginSchema';\n\nconst LoginForm = () => {\n  const { showPasswords, togglePasswordVisibility } = usePasswordToggle([\n    'password1',\n    'password2',\n  ]);\n  const dispatch = useDispatch();\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(logInThunk(values))\n      .unwrap()\n      .then(data => {\n        resetForm();\n        toast.success(\n          `Well done  ${data.user.username}! You have signed in successfully.`\n        );\n      })\n      .catch(error => {\n        toast.error(error.message);\n      });\n  };\n\n  return (\n    <div className={css.loginform}>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={loginSchema}\n        onSubmit={handleSubmit}\n      >\n        <form>\n          <div>\n            <div div className={css.wrappericon}>\n              <input\n                type=\"email\"\n                name=\"email\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer\"\n                placeholder=\"E-mail\"\n                autoComplete=\"off\"\n                required\n              />\n            </div>\n            <ErrorMessage name=\"email\" component={FormError} />\n            <div className={css.wrappericon3}>\n              <div className={css.wrappericon2}>\n                <input\n                  type={showPasswords.password1 ? 'text' : 'password'}\n                  name=\"password\"\n                  title=\"Enter the password more difficult, letter, digit, capital letter.\"\n                  placeholder=\"Password\"\n                  autoComplete=\"off\"\n                  required\n                />\n              </div>\n              <togglePasswordIcon\n                showPassword={showPasswords.password1}\n                onToggle={() => togglePasswordVisibility('password1')}\n              />\n            </div>\n            <ErrorMessage name=\"password\" component={FormError} />\n          </div>\n          <Button type=\"submit\" text=\"log in\">\n            <Link to=\"/registration\">\n              <Button text=\"registration\" variant=\"secondary\" />\n            </Link>\n          </Button>\n        </form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport css from './Login.module.css';\n\nconst Login = () => {\n  return (\n    <div className={css.logincontainer}>\n      <LoginForm />\n    </div>\n  );\n};\n\nexport default Login;\n","import axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'https://wallet.goit.ua/api',\n});\n\n// Set token\nexport const setAuthHeader = token => {\n  instance.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\nexport const clearAuthHeader = () => {\n  instance.defaults.headers.common.Authorization = '';\n};\n\n// Get current user info\nexport const fetchCurrentUser = async () => {\n  const { data } = await instance.get('/users/current');\n  return data;\n};\n\n// Create new transaction for logged in user\nexport const addNewTransaction = async transaction => {\n  const { data } = await instance.post('/transactions', transaction);\n  return data;\n};\n\n// Get all transactions for logged in user\nexport const getTransaction = async () => {\n  const { data } = await instance.get('/transactions');\n  return data;\n};\n\n// Update transaction\nexport const updateTransaction = async ({ transactionId, transaction }) => {\n  const { data } = await instance.patch(\n    `/transactions/${transactionId}`,\n    transaction\n  );\n  return data;\n};\n\n// Delete Transaction\nexport const deleteTransaction = async transactionId => {\n  const { data } = await instance.delete(`/transactions/${transactionId}`);\n  return data;\n};\n\n// Transaction Categories\nexport const fetchCategories = async () => {\n  const { data } = await instance.get('/transaction-categories');\n  return data;\n};\n\n// Auth Controller\n// Sign up new user\nexport const signUp = async user => {\n  const { data } = await instance.post('/auth/sign-up', user);\n  setAuthHeader(data.token);\n  return data;\n};\n\n// Sign in existing user\nexport const signIn = async user => {\n  const { data } = await instance.post(`/auth/sign-in`, user);\n  setAuthHeader(data.token);\n  return data;\n};\n\n// Sign out existing user\nexport const signOut = () => {\n  instance.delete('/auth/sign-out/');\n  clearAuthHeader();\n};\n\n// Get transactions summary for period\n\nexport const fetchTransactionsSummary = async ({ year, month }) => {\n  const { data } = await instance.get('/transactions-summary', {\n    params: {\n      year,\n      month,\n    },\n  });\n  return data;\n};\n\nexport const fetchCurrencyRates = async () => {\n  const lastRequestTime = localStorage.getItem('lastRequestTime');\n  const currentTime = Date.now();\n\n  if (lastRequestTime && currentTime - lastRequestTime < 3600000) {\n    const dataFromStorage = localStorage.getItem('currencyData');\n    if (dataFromStorage) {\n      return JSON.parse(dataFromStorage);\n    }\n  }\n\n  try {\n    const response = await axios.get('https://api.monobank.ua/bank/currency');\n    const data = response.data;\n\n    localStorage.setItem('currencyData', JSON.stringify(data));\n    localStorage.setItem('lastRequestTime', currentTime);\n\n    return data;\n  } catch (error) {\n    return null;\n  }\n};\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport {\n  fetchCurrentUser,\n  setAuthHeader,\n  signIn,\n  signOut,\n  signUp,\n} from 'services/api/api';\n\nexport const signUpThunk = createAsyncThunk(\n  'auth/signUp',\n  async (credentials, { rejectWithValue }) => {\n    try {\n      const data = await signUp(credentials);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const logInThunk = createAsyncThunk(\n  'auth/logIn',\n  async (credentials, { rejectWithValue }) => {\n    try {\n      const data = await signIn(credentials);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.response.data);\n    }\n  }\n);\n\nexport const logOutThunk = createAsyncThunk(\n  'auth/logOut',\n  async (_, { rejectWithValue }) => {\n    try {\n      await signOut();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const fetchCurrentUserThunk = createAsyncThunk(\n  'auth/refresh',\n  async (_, { rejectWithValue, getState }) => {\n    const state = getState();\n    const persistedToken = state.auth.token;\n\n    if (!persistedToken) {\n      return rejectWithValue('Unable to fetch user.');\n    }\n\n    setAuthHeader(persistedToken);\n\n    try {\n      const data = await fetchCurrentUser();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n"],"names":["Button","onClick","text","type","variant","FormError","name","render","message","usePasswordToggle","fields","initialState","reduce","acc","field","useState","showPasswords","setShowPasswords","togglePasswordVisibility","prevState","loginSchema","yup","shape","email","test","value","trim","required","max","password","min","matches","dispatch","useDispatch","className","css","initialValues","validationSchema","onSubmit","values","resetForm","logInThunk","unwrap","then","data","toast","user","username","catch","error","div","title","placeholder","autoComplete","component","password1","showPassword","onToggle","to","instance","axios","baseURL","setAuthHeader","token","defaults","headers","common","Authorization","fetchCurrentUser","get","signUp","post","signIn","signOut","delete","signUpThunk","createAsyncThunk","credentials","rejectWithValue","response","_","getState","state","persistedToken","auth"],"sourceRoot":""}